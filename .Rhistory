#cat("target: ",target,"UpperBoundary: ",monitorArray[[numberInspections+1]][[UPPER_BOUNDI]],"\n")
return(probCrossUpperDiscrete(0,numberInspections)-target)
}
lower_search_fn = function(lowerBoundary,numberInspections) {
target = alpha_star_l[numberInspections + 1] - alpha_star_l[numberInspections]
monitorArray[[numberInspections+1]][UPPER_BOUNDI] <<- 0
monitorArray[[numberInspections+1]][LOWER_BOUNDI] <<- lowerBoundary
return(probCrossLowerDiscrete(0,numberInspections) - target)
}
getErrorRates = function(get_power,numberInspections,print) {
alpha_u = 0
alpha_l = 0
#cat("numberInspections: ",numberInspections,"\n")
densityFunctionDiscreteArray <<- densityArray(get_power,numberInspections,INTEGR_POINTS)
for ( inspection in 1:(numberInspections+1)) {
#print("hereeeeeeeeeeeeeee")
alpha_u = alpha_u + probCrossUpperDiscrete(get_power,inspection)
#cat("alpha_u: ",alpha_u, "\n")
if ( get_power == 0) alpha_l = alpha_l + probCrossLowerDiscrete(get_power,inspection)
if ( print == 1 & get_power == 0) cat("alpha_u: ", alpha_u, "alpha_l", alpha_l,"\n")
if ( print == 1 & get_power == 1) cat("alpha_u: ",alpha_u,"\n")
}
if (print==1 & get_power == 0) cat("alpha_u: ",alpha_u, "alpha_l", alpha_l,"\n")
if (print==1 & get_power == 1) cat("alpha_u: ",alpha_u,"\n")
return(alpha_u)
}
probCrossUpperDiscrete = function(get_power,inspection) {
upperBound = monitorArray[[inspection+1]][UPPER_BOUNDI]
vStep = monitorArray[[inspection+1]][VI] - monitorArray[[inspection]][VI]
# cat("upperBound: ",upperBound," vStep: ",vStep,"inspection: ",inspection, "\n")
if(inspection == 1) {
#print(TRUE)
return(0)
}
else
{
return(integrateNormalDistributionDensityFunctionDiscrete(inspection))
}
}
integrateNormalDistributionDensityFunctionDiscrete = function(inspection) {
integral = 0
vStep = monitorArray[[inspection+1]][VI] - monitorArray[[inspection]][VI]
#cat("vStep in integrate function: ",vStep,"inspection: ",inspection, "\n")
for ( i in 0:(INTEGR_POINTS-1)) {
s = densityFunctionDiscreteArray[[inspection-1]][ARRVALUE,i+1]
if (inspection == 2) {
mu_second = theta[1]*monitorArray[[3]][VI] - rho*sqrt(monitorArray[[3]][VI]/monitorArray[[2]][VI])*
(theta[1]*monitorArray[[2]][VI]-s)
var_second = monitorArray[[3]][VI]*(1-rho*rho)
# #cat("Test: ",monitorArray[[2]][VI],"Test 2: ",monitorArray[[1]][VI],"\n")
normalDistribution = 1 - pnorm((monitorArray[[inspection+1]][UPPER_BOUNDI] - mu_second)/sqrt(var_second))
}
else {
normalDistribution = 1 - pnorm((monitorArray[[inspection+1]][UPPER_BOUNDI] - s - theta[1]*vStep)/sqrt(vStep))
}
#cat("Test 1: ",densityFunctionDiscreteArray[[inspection-1]][ARRWEIGHT,i + 1]," Test 2: ",
#densityFunctionDiscreteArray[[inspection -1]][ARRDENSITY,i+1],"\n")
integral = integral + densityFunctionDiscreteArray[[inspection-1]][ARRWEIGHT,i + 1]*
densityFunctionDiscreteArray[[inspection -1]][ARRDENSITY,i+1]*
normalDistribution
}
#cat("Integral result Here: ", integral, "\n")
return(integral)
}
probCrossLowerDiscrete = function(get_power, inspection) {
lowerBound = monitorArray[[inspection+1]][LOWER_BOUNDI]
vStep = monitorArray[[inspection+1]][VI] - monitorArray[[inspection]][VI]
if(inspection == 1) return(0)
else return (integrateNormalDistributionDensityFunctionDiscreteLower(inspection))
}
integrateNormalDistributionDensityFunctionDiscreteLower = function(inspection) {
integral = 0
vStep = monitorArray[[inspection+1]][VI] - monitorArray[[inspection]][VI]
for ( i in 0:(INTEGR_POINTS - 1)) {
s = densityFunctionDiscreteArray[[inspection-1]][ARRVALUE,i+1]
if ( inspection == 2) {
mu_second = theta[1]*monitorArray[[3]][VI] - rho*sqrt(monitorArray[[3]][VI]/monitorArray[[2]][VI])*
(theta[1]*monitorArray[[2]][VI]-s)
var_second = monitorArray[[3]][VI]*(1-rho*rho)
# #cat("mu_second: ",mu_second,"var_second: ",var_second,"s: ",s,"test: ",monitorArray[[inspection+1]][UPPER_BOUNDI] ,"\n")
normalDistribution = pnorm((monitorArray[[inspection+1]][LOWER_BOUNDI] - mu_second)/sqrt(var_second))
# #cat("normalDistribution: ",normalDistribution,"\n")
}
else {
normalDistribution = pnorm((monitorArray[[inspection+1]][LOWER_BOUNDI] - s - theta[1]*vStep)/sqrt(vStep))
}
integral = integral + densityFunctionDiscreteArray[[inspection-1]][ARRWEIGHT,i+1]*
densityFunctionDiscreteArray[[inspection-1]][ARRDENSITY,i+1]*
normalDistribution
}
#cat("Integral result Here: ", integral, "\n")
return(integral)
}
densityArray = function(get_power,numberInspections,numberIntervals) {
array = list(c(0))
for ( i in 1:numberInspections) array[[i]] = matrix(rep(0,3*INTEGR_POINTS),nrow = 3)
for ( i in 0:(numberInspections-1)) {
lowerLimit = monitorArray[[i+2]][LOWER_BOUNDI]
upperLimit = monitorArray[[i+2]][UPPER_BOUNDI]
if (i == 0) lowerLimit = -10*sqrt(monitorArray[[2]][VI])
if (i == 0) upperLimit = 10*sqrt(monitorArray[[2]][VI])
# cat("lowerLimit: ",lowerLimit,"upperLimit: ",upperLimit,"\n")
arrayvalweights = gaussLegendre(n = INTEGR_POINTS,lowerLimit,upperLimit)
array[[i+1]][ARRVALUE,] = arrayvalweights$x
array[[i+1]][ARRWEIGHT,] = arrayvalweights$w
vStep = monitorArray[[i+2]][VI] - monitorArray[[i+1]][VI]
#cat("vStep: ",vStep,"\n")
if ( i ==0 ) {
for( j in 0:(INTEGR_POINTS-1)){
z = array[[i+1]][ARRVALUE,j+1]
# cat("z: ",z,"\n")
if(get_power==0) {
array[[i+1]][ARRDENSITY,j+1] = get_density_first(ntmt,theta,vStep,z)
}
if (get_power == 1) {
array[[i+1]][ARRDENSITY,j+1] = get_power_first(ntmt,theta,vStep,z)
}
}
# for ( r in 1:11 ) cat("BLAH HERE: ",array[[i+1]][ARRDENSITY,r],"\n")
}
if ( i ==1 ) {
for ( j in 0:(INTEGR_POINTS-1)) {
density = 0.0
z = array[[i+1]][ARRVALUE,j+1]
for( k  in 0:(INTEGR_POINTS-1)){
s  = array[[i]][ARRVALUE,k+1]
mu_second = theta[1]*monitorArray[[3]][VI] - rho*sqrt(monitorArray[[3]][VI]/monitorArray[[2]][VI])*
(theta[1]*monitorArray[[2]][VI] - s)
var_second = monitorArray[[3]][VI]*(1-rho*rho)
density = density + array[[i]][ARRWEIGHT,k+1]*
(1/sqrt(var_second))*dnorm((z-mu_second)/sqrt(var_second))*(array[[i]][ARRDENSITY,k+1])
}
#cat("density :",density,"i: ",i,"\n")
array[[i+1]][ARRDENSITY,j+1] = density
}
}
if ( i >= 2) {
#print(TRUE)
for(j in 0:(INTEGR_POINTS-1) )
{
density = 0
z = array[[i+1]][ARRVALUE,j+1]
for (k in 0:(INTEGR_POINTS-1)) {
s = array[[i]][ARRVALUE,k+1]
density = density + array[[i]][ARRWEIGHT,k+1]*(1/sqrt(vStep))*dnorm((z-s-theta[1]*vStep)/sqrt(vStep))*array[[i]][ARRDENSITY,k+1]
}
# cat("density :",density,"\n")
array[[i+1]][ARRDENSITY,j+1] = density
}
}
}
return(array)
}
get_density_first = function(ntmt,theta,v,z) {
lowerLimit = -20*sqrt(v)
upperLimit = 20*sqrt(v)
xvalweights = gaussLegendre(INTEGR_POINTS_First,lowerLimit,upperLimit)
integral = 0
for ( j in 0 :(INTEGR_POINTS_First-1)){
integral = integral + get_integrand(ntmt,theta,v,z,xvalweights$x[j+1])*xvalweights$w[j+1]
}
return(integral)
}
get_integrand = function(k,theta,v,z,x) {
root = sqrt(v/2)
product = 1
for( i in 1:k ) {
product = product*pnorm((x-theta1[i]*v)/root)
}
integrand = product*2*(x-z)*dnorm((x-z)/root)/(v*root)
return(integrand)
}
get_power_first = function(ntmt,theta,v,z) {
lowerLimit = -20*sqrt(v)
upperLimit = 20*sqrt(v)
xvalweights = gaussLegendre(INTEGR_POINTS_First,lowerLimit,upperLimit)
integral = 0
for ( j in 0:(INTEGR_POINTS_First-1)) {
integral = integral + get_integrand_power(ntmt,theta,v,z,xvalweights$x[j+1])*xvalweights$w[j+1]
}
return(integral)
}
get_integrand_power = function(k,theta,v,z,x) {
root = sqrt(v/2)
product = 1
for ( i in 2:k) {
product = product*pnorm((x-theta1[i]*v)/root)
}
integrand = product*dnorm((x-theta1[1]*v)/root)*dnorm((x-z)/root)*2/v
return(integrand)
}
binarySearchUpper = function(lowerLimit,upperLimit,numberInspections) {
loop = 0
f_upr = upper_search_fn(upperLimit,numberInspections)
#cat("Number inspections: ", numberInspections, " f_upr: ",f_upr, "\n")
while ( loop < BINARY_SEARCH_MAX_ITERATIONS) {
mid_val = (upperLimit+lowerLimit)/2
if( abs(mid_val) >= CLOSE_ZERO & abs((upperLimit - mid_val)/mid_val) < SEARCH_TOLERANCE)
return(mid_val)
loop = loop + 1
f_mid = upper_search_fn(mid_val,numberInspections)
#cat("f_mid: ", f_mid,"\n")
if(f_mid*f_upr == 0 ){
return(mid_val)
}
else{
if(f_mid*f_upr > 0 )
{
upperLimit = mid_val
f_upr = f_mid
}
else {
lowerLimit = mid_val
}
}
}
return(mid_val)
}
binarySearchLower = function(lowerLimit,upperLimit,numberInspections) {
loop = 0
f_upr = lower_search_fn(upperLimit,numberInspections)
while ( loop < BINARY_SEARCH_MAX_ITERATIONS) {
mid_val = (upperLimit+lowerLimit)/2
if( abs(mid_val) >= CLOSE_ZERO & abs((upperLimit - mid_val)/mid_val) < SEARCH_TOLERANCE)
return(mid_val)
loop = loop + 1
f_mid = lower_search_fn(mid_val,numberInspections)
if(f_mid*f_upr == 0 ){
return(mid_val)
}
else{
if(f_mid*f_upr > 0 )
{
upperLimit = mid_val
f_upr = f_mid
}
else {
lowerLimit = mid_val
}
}
}
#print(mid_val)
return(mid_val)
}
binarySearchV = function(lowerLimit,upperLimit,numberInspections) {
loop = 0
f_upr = v_search_fn(upperLimit)
#print(lowerLimit)
#print(upperLimit)
while ( loop < BINARY_SEARCH_MAX_ITERATIONS) {
mid_val = (upperLimit+lowerLimit)/2
if( abs(mid_val) >= CLOSE_ZERO & abs((upperLimit - mid_val)/mid_val) < SEARCH_TOLERANCE)
return(mid_val)
loop = loop + 1
f_mid = v_search_fn(mid_val)
if(f_mid*f_upr == 0 ){
return(mid_val)
}
else{
if(f_mid*f_upr > 0 )
{
upperLimit = mid_val
f_upr = f_mid
}
else {
lowerLimit = mid_val
}
}
}
return(mid_val)
}
main()
monitorArray
#Test script
library(pracma)
alpha_star_u = c(0 , 0.000000, 0.001226, 0.009513, 0.018794, 0.024457, 0.025000)
alpha_star_l = c(0 ,0.000000,  0.184595, 0.733395, 0.933759, 0.973494, 0.975000)
ARRVALUE = 2
ARRDENSITY = 1
ARRWEIGHT = 3
LOWER_BOUNDI = 1
UPPER_BOUNDI = 2
set.seed(10101)
VI = 3
ZI = 4
TOLERANCE = 0.00000000001
SEARCH_TOLERANCE = 0.0000001
best = 0
CLOSE_ZERO = 0.000000000001
BINARY_SEARCH_MAX_ITERATIONS = 400
INTEGR_POINTS = 101
INTEGR_POINTS_First = 151
tindex = c(2,4,6)
binindex = c(1,3,5)
boundsarr = list(c(0,0))
monitorArray <<- list()
stdmonitorArray = list(c(0,0,0,0))
densityFunctionDiscreteArray = list(c(0))
array = list(c(0))
ntmt = 2
theta = rep(0,ntmt)
theta1 = rep(0,ntmt)
rho = 0.05
ntmt = 2
numberInspectionsMax = 3
currentInspection = 3
# mean.bin = c(.9,.9,.9)
# mean.t = c(0,0,0)
p1 = 0.5
p2 = 0.5
N <<- 25
sigma = 1
for ( i in 1:(numberInspectionsMax + 2)) monitorArray[[i]] = c(0,0,0,0)
monitorArray <<- monitorArray
for ( i in 1:(numberInspectionsMax + 2)) stdmonitorArray[[i]] = c(0,0,0,0)
inspection = 1
stdmonitorArray <<- stdmonitorArray
covValues = genCovValues(p=c(p1,p2),N=25)
treat = psd(covValues,n.trt = 2)
data = simulatedata.car(mean.s = c(0,0,0),sigma = 1,tau1 = 1,tau2 = 1,treat,covValues,dist = "normal",inspection)
get.z.v.full(data,1,"normal")
monitorArray[[inspection +1 ]][UPPER_BOUNDI]  = 0
monitorArray[[inspection +1 ]][LOWER_BOUNDI] = 0
monitorArray <<- monitorArray
allnew = genCovValues(p=c(p1,p2),N=100)
covValues = rbind(covValues,allnew)
treat = psd(covValues,best = best,tr = treat)
data = simulatedata.car(mean.s = c(0.8,0.7,0.6),treat=treat,covValues = covValues,data = data,dist = "bin", inspection = 2)
get.z.v.full(data,2,"bin")
densityFunctionDiscreteArray <<- densityArray(0,2-1)
upperBoundary = binarySearchUpper(0,5*sqrt(monitorArray[[inspection-1]][VI]),inspection)
lowerBoundary = binarySearchLower(-5*sqrt(monitorArray[[inspection-2]][VI]),5*sqrt(monitorArray[[inspection-1]][VI]),inspection)
allnew = genCovValues(p=c(p1,p2),N=50)
covValues = rbind(covValues,allnew)
treat =  psd(covValues,best = best, tr = treat)
data = simulatedata.car(mean.s = c(0.5,0.5,0.5),treat = treat, covValues = covValues, data = data, dist = "bin" , inspection = 3)
get.z.v.full(data,3,"bin")
allnew = genCovValues(p = c(p1,p2),N=50)
covValues = rbind(covValues,allnew)
treat = psd(covValues, best = best, tr = treat)
data = simulatedata.car(mean.s = c(0.5,0.5,0.5),treat = treat, covValues = covValues, data = data, dist = "bin" , inspection = 3)
get.z.v.full(data,4,'bin')
monitorArray[[1]][VI] <<- 0
# print(monitorArray[[2]][VI])
for ( numberInspections in 1:numberInspectionsMax) {
if(numberInspections == 1) {
monitorArray[[numberInspections]][UPPER_BOUNDI]  <<- 0
monitorArray[[numberInspections]][LOWER_BOUNDI] <<- 0
get.z.v.full(full.data.list[[numberInspections]],numberInspections)
}
if ( numberInspections > 1) {
get.z.v.full(full.data.list[[numberInspections]],numberInspections)
densityFunctionDiscreteArray <<- densityArray(0,numberInspections-1,INTEGR_POINTS)
cat("Test Here: ",monitorArray[[numberInspections+1]][VI])
upperBoundary = binarySearchUpper(0,5*sqrt(monitorArray[[numberInspections+1]][VI]),numberInspections)
lowerBoundary = binarySearchLower(-5*sqrt(monitorArray[[numberInspections+1]][VI]),5*sqrt(monitorArray[[numberInspections+1]][VI]),numberInspections)
cat("\n lowerBoundary here: ", lowerBoundary,"upperBoundary here: ",upperBoundary,"\n")
#Think I have to use two different functions for upper and lower since R can't do pointer functions
monitorArray[[numberInspections+1]][UPPER_BOUNDI] <<- upperBoundary
monitorArray[[numberInspections+1]][LOWER_BOUNDI] <<- lowerBoundary
}
}
load_all()
library(pracma)
alpha_star_u = c(0 , 0.000000, 0.001226, 0.009513, 0.018794, 0.024457, 0.025000)
alpha_star_l = c(0 ,0.000000,  0.184595, 0.733395, 0.933759, 0.973494, 0.975000)
ARRVALUE = 2
ARRDENSITY = 1
ARRWEIGHT = 3
LOWER_BOUNDI = 1
UPPER_BOUNDI = 2
set.seed(10101)
VI = 3
ZI = 4
TOLERANCE = 0.00000000001
SEARCH_TOLERANCE = 0.0000001
best = 0
CLOSE_ZERO = 0.000000000001
BINARY_SEARCH_MAX_ITERATIONS = 400
INTEGR_POINTS = 101
INTEGR_POINTS_First = 151
tindex = c(2,4,6)
binindex = c(1,3,5)
boundsarr = list(c(0,0))
monitorArray <<- list()
stdmonitorArray = list(c(0,0,0,0))
densityFunctionDiscreteArray = list(c(0))
array = list(c(0))
ntmt = 2
theta = rep(0,ntmt)
theta1 = rep(0,ntmt)
rho = 0.05
ntmt = 2
numberInspectionsMax = 3
monitorArray
numberInspectionsMax = 3
currentInspection = 3
# mean.bin = c(.9,.9,.9)
# mean.t = c(0,0,0)
p1 = 0.5
p2 = 0.5
N <<- 25
sigma = 1
for ( i in 1:(numberInspectionsMax + 2)) monitorArray[[i]] = c(0,0,0,0)
monitorArray <<- monitorArray
for ( i in 1:(numberInspectionsMax + 2)) stdmonitorArray[[i]] = c(0,0,0,0)
inspection = 1
monitorArray
stdmonitorArray <<- stdmonitorArray
covValues = genCovValues(p=c(p1,p2),N=25)
treat = psd(covValues,n.trt = 2)
data = simulatedata.car(mean.s = c(0,0,0),sigma = 1,tau1 = 1,tau2 = 1,treat,covValues,dist = "normal",inspection)
get.z.v.full(data,1,"normal")
data = simulatedata.car(mean.s = c(0,0,0),sigma = 1,tau1 = 1,tau2 = 1,treat,covValues,dist = "normal",inspection= inspection
)
get.z.v.full(data,1,"normal")
monitorArray[[inspection +1 ]][UPPER_BOUNDI]  = 0
monitorArray[[inspection +1 ]][LOWER_BOUNDI] = 0
monitorArray <<- monitorArray
monitorArray
document()
for ( i in 1:(numberInspectionsMax + 2)) monitorArray[[i]] = c(0,0,0,0)
monitorArray <<- monitorArray
get.z.v.full(data,1,"normal")
monitorArray[[inspection +1 ]][UPPER_BOUNDI]  = 0
monitorArray[[inspection +1 ]][LOWER_BOUNDI] = 0
monitorArray <<- monitorArray
monitorArray
allnew = genCovValues(p=c(p1,p2),N=100)
covValues = rbind(covValues,allnew)
treat = psd(covValues,best = best,tr = treat)
data = simulatedata.car(mean.s = c(0.8,0.7,0.6),treat=treat,covValues = covValues,data = data,dist = "bin", inspection = 2)
get.z.v.full(data,2,"bin")
densityFunctionDiscreteArray <<- densityArray(0,2-1)
upperBoundary = binarySearchUpper(0,5*sqrt(monitorArray[[inspection+1]][VI]),inspection)
lowerBoundary = binarySearchLower(-5*sqrt(monitorArray[[inspection+1]][VI]),5*sqrt(monitorArray[[inspection+1]][VI]),inspection)
monitorArray
inspection
inspection = 2
upperBoundary = binarySearchUpper(0,5*sqrt(monitorArray[[inspection+1]][VI]),inspection)
lowerBoundary = binarySearchLower(-5*sqrt(monitorArray[[inspection+1]][VI]),5*sqrt(monitorArray[[inspection+1]][VI]),inspection)
inspection = 3
allnew = genCovValues(p=c(p1,p2),N=100)
covValues = rbind(covValues,allnew)
treat =  psd(covValues,best = best, tr = treat)
data = simulatedata.car(mean.s = c(0.5,0.5,0.5),treat = treat, covValues = covValues, data = data, dist = "bin" , inspection = inspection)
get.z.v.full(data,3,"bin")
monitorArray
monitorArray[[numberInspections+1]][UPPER_BOUNDI] <<- upperBoundary
`#Test script
library(pracma)
alpha_star_u = c(0 , 0.000000, 0.001226, 0.009513, 0.018794, 0.024457, 0.025000)
alpha_star_l = c(0 ,0.000000,  0.184595, 0.733395, 0.933759, 0.973494, 0.975000)
ARRVALUE = 2
ARRDENSITY = 1
ARRWEIGHT = 3
LOWER_BOUNDI = 1
UPPER_BOUNDI = 2
set.seed(10101)
VI = 3
ZI = 4
TOLERANCE = 0.00000000001
SEARCH_TOLERANCE = 0.0000001
best = 0
CLOSE_ZERO = 0.000000000001
BINARY_SEARCH_MAX_ITERATIONS = 400
INTEGR_POINTS = 101
INTEGR_POINTS_First = 151
tindex = c(2,4,6)
binindex = c(1,3,5)
boundsarr = list(c(0,0))
monitorArray <<- list()
stdmonitorArray = list(c(0,0,0,0))
densityFunctionDiscreteArray = list(c(0))
array = list(c(0))
ntmt = 2
theta = rep(0,ntmt)
theta1 = rep(0,ntmt)
rho = 0.05
ntmt = 2
numberInspectionsMax = 3
currentInspection = 3
# mean.bin = c(.9,.9,.9)
# mean.t = c(0,0,0)
p1 = 0.5
p2 = 0.5
N <<- 25
sigma = 1
for ( i in 1:(numberInspectionsMax + 2)) monitorArray[[i]] = c(0,0,0,0)
monitorArray <<- monitorArray
for ( i in 1:(numberInspectionsMax + 2)) stdmonitorArray[[i]] = c(0,0,0,0)
inspection = 1
stdmonitorArray <<- stdmonitorArray
covValues = genCovValues(p=c(p1,p2),N=25)
treat = psd(covValues,n.trt = 2)
data = simulatedata.car(mean.s = c(0,0,0),sigma = 1,tau1 = 1,tau2 = 1,treat,covValues,dist = "normal",inspection= inspection
)
get.z.v.full(data,1,"normal")
monitorArray[[inspection +1 ]][UPPER_BOUNDI]  = 0
monitorArray[[inspection +1 ]][LOWER_BOUNDI] = 0
monitorArray <<- monitorArray
allnew = genCovValues(p=c(p1,p2),N=100)
covValues = rbind(covValues,allnew)
treat = psd(covValues,best = best,tr = treat)
data = simulatedata.car(mean.s = c(0.8,0.7,0.6),treat=treat,covValues = covValues,data = data,dist = "bin", inspection = 2)
get.z.v.full(data,2,"bin")
densityFunctionDiscreteArray <<- densityArray(0,2-1)
upperBoundary = binarySearchUpper(0,5*sqrt(monitorArray[[inspection+1]][VI]),inspection)
lowerBoundary = binarySearchLower(-5*sqrt(monitorArray[[inspection+1]][VI]),5*sqrt(monitorArray[[inspection+1]][VI]),inspection)
monitorArray[[numberInspections+1]][UPPER_BOUNDI] = upperBoundary
monitorArray[[numberInspections+1]][LOWER_BOUNDI] = lowerBoundary
monitorArray <<- monitorArray
